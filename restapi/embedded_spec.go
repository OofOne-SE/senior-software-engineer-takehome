// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Backend API",
    "title": "Backend API",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/data/weather": {
      "get": {
        "security": [],
        "tags": [
          "Weather Assets"
        ],
        "summary": "Returns weather data for specific day or interval. For a single day use same date as from and to parameters",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful, returns weather data units in array or nil array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WeatherUnit"
              }
            }
          },
          "default": {
            "description": "errors:\n| code                                   | HTTP Code | error                 |\n|----------------------------------------|-----------|---------------------- |\n| data.weather.get.internal_server_error | 500       | Internal server error |\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Weather Assets"
        ],
        "summary": "Single weather data is created",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created"
          },
          "default": {
            "description": "errors:\n| code                                    | HTTP Code | error                 |\n|-----------------------------------------|-----------|---------------------- |\n| data.weather.post.internal_server_error | 500       | Internal server error |\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ws": {
      "get": {
        "security": [],
        "tags": [
          "Service"
        ],
        "summary": "Subscribe to weather data events",
        "responses": {
          "101": {
            "description": "Done"
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        }
      },
      "example": {
        "code": "data.weather.get.internal_server_error",
        "error": "Internal server error",
        "requiest_id": "b4fcca1d-e391-4a4c-bb50-6b67343ed9f1"
      }
    },
    "WeatherUnit": {
      "type": "object",
      "required": [
        "date",
        "temperature",
        "humidity"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "humidity": {
          "type": "number"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "temperature": {
          "type": "number"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Humidity and temperature data",
      "name": "Weather Assets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Backend API",
    "title": "Backend API",
    "version": "1.0.0"
  },
  "basePath": "/api",
  "paths": {
    "/data/weather": {
      "get": {
        "security": [],
        "tags": [
          "Weather Assets"
        ],
        "summary": "Returns weather data for specific day or interval. For a single day use same date as from and to parameters",
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "name": "from",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date",
            "name": "to",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful, returns weather data units in array or nil array",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/WeatherUnit"
              }
            }
          },
          "default": {
            "description": "errors:\n| code                                   | HTTP Code | error                 |\n|----------------------------------------|-----------|---------------------- |\n| data.weather.get.internal_server_error | 500       | Internal server error |\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Weather Assets"
        ],
        "summary": "Single weather data is created",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WeatherUnit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created"
          },
          "default": {
            "description": "errors:\n| code                                    | HTTP Code | error                 |\n|-----------------------------------------|-----------|---------------------- |\n| data.weather.post.internal_server_error | 500       | Internal server error |\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ws": {
      "get": {
        "security": [],
        "tags": [
          "Service"
        ],
        "summary": "Subscribe to weather data events",
        "responses": {
          "101": {
            "description": "Done"
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "error": {
          "type": "string"
        },
        "request_id": {
          "type": "string"
        }
      },
      "example": {
        "code": "data.weather.get.internal_server_error",
        "error": "Internal server error",
        "requiest_id": "b4fcca1d-e391-4a4c-bb50-6b67343ed9f1"
      }
    },
    "WeatherUnit": {
      "type": "object",
      "required": [
        "date",
        "temperature",
        "humidity"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date"
        },
        "humidity": {
          "type": "number"
        },
        "id": {
          "type": "string",
          "format": "uuid",
          "readOnly": true
        },
        "temperature": {
          "type": "number"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Humidity and temperature data",
      "name": "Weather Assets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ]
}`))
}
