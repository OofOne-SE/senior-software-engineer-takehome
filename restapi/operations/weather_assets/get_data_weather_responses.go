// Code generated by go-swagger; DO NOT EDIT.

package weather_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"senior-software-engineer-takehome/models"
)

// GetDataWeatherOKCode is the HTTP code returned for type GetDataWeatherOK
const GetDataWeatherOKCode int = 200

/*GetDataWeatherOK Successful, returns weather data units in array or nil array

swagger:response getDataWeatherOK
*/
type GetDataWeatherOK struct {

	/*
	  In: Body
	*/
	Payload []*models.WeatherUnit `json:"body,omitempty"`
}

// NewGetDataWeatherOK creates GetDataWeatherOK with default headers values
func NewGetDataWeatherOK() *GetDataWeatherOK {

	return &GetDataWeatherOK{}
}

// WithPayload adds the payload to the get data weather o k response
func (o *GetDataWeatherOK) WithPayload(payload []*models.WeatherUnit) *GetDataWeatherOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get data weather o k response
func (o *GetDataWeatherOK) SetPayload(payload []*models.WeatherUnit) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDataWeatherOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.WeatherUnit, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*GetDataWeatherDefault errors:
| code                                   | HTTP Code | error                 |
|----------------------------------------|-----------|---------------------- |
| data.weather.get.internal_server_error | 500       | Internal server error |


swagger:response getDataWeatherDefault
*/
type GetDataWeatherDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetDataWeatherDefault creates GetDataWeatherDefault with default headers values
func NewGetDataWeatherDefault(code int) *GetDataWeatherDefault {
	if code <= 0 {
		code = 500
	}

	return &GetDataWeatherDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get data weather default response
func (o *GetDataWeatherDefault) WithStatusCode(code int) *GetDataWeatherDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get data weather default response
func (o *GetDataWeatherDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get data weather default response
func (o *GetDataWeatherDefault) WithPayload(payload *models.Error) *GetDataWeatherDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get data weather default response
func (o *GetDataWeatherDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDataWeatherDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
