// Code generated by go-swagger; DO NOT EDIT.

package weather_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"senior-software-engineer-takehome/models"
)

// PostDataWeatherOKCode is the HTTP code returned for type PostDataWeatherOK
const PostDataWeatherOKCode int = 200

/*PostDataWeatherOK Successfully created

swagger:response postDataWeatherOK
*/
type PostDataWeatherOK struct {
}

// NewPostDataWeatherOK creates PostDataWeatherOK with default headers values
func NewPostDataWeatherOK() *PostDataWeatherOK {

	return &PostDataWeatherOK{}
}

// WriteResponse to the client
func (o *PostDataWeatherOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(200)
}

/*PostDataWeatherDefault errors:
| code                                    | HTTP Code | error                 |
|-----------------------------------------|-----------|---------------------- |
| data.weather.post.internal_server_error | 500       | Internal server error |


swagger:response postDataWeatherDefault
*/
type PostDataWeatherDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostDataWeatherDefault creates PostDataWeatherDefault with default headers values
func NewPostDataWeatherDefault(code int) *PostDataWeatherDefault {
	if code <= 0 {
		code = 500
	}

	return &PostDataWeatherDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post data weather default response
func (o *PostDataWeatherDefault) WithStatusCode(code int) *PostDataWeatherDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post data weather default response
func (o *PostDataWeatherDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post data weather default response
func (o *PostDataWeatherDefault) WithPayload(payload *models.Error) *PostDataWeatherDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post data weather default response
func (o *PostDataWeatherDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostDataWeatherDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
