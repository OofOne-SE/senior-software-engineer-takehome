// Code generated by go-swagger; DO NOT EDIT.

package weather_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDataWeatherHandlerFunc turns a function with the right signature into a get data weather handler
type GetDataWeatherHandlerFunc func(GetDataWeatherParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataWeatherHandlerFunc) Handle(params GetDataWeatherParams) middleware.Responder {
	return fn(params)
}

// GetDataWeatherHandler interface for that can handle valid get data weather params
type GetDataWeatherHandler interface {
	Handle(GetDataWeatherParams) middleware.Responder
}

// NewGetDataWeather creates a new http.Handler for the get data weather operation
func NewGetDataWeather(ctx *middleware.Context, handler GetDataWeatherHandler) *GetDataWeather {
	return &GetDataWeather{Context: ctx, Handler: handler}
}

/*GetDataWeather swagger:route GET /data/weather Weather Assets getDataWeather

Returns weather data for specific day or interval. For a single day use same date as from and to parameters

*/
type GetDataWeather struct {
	Context *middleware.Context
	Handler GetDataWeatherHandler
}

func (o *GetDataWeather) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataWeatherParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
