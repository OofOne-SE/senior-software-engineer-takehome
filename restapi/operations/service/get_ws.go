// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWsHandlerFunc turns a function with the right signature into a get ws handler
type GetWsHandlerFunc func(GetWsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWsHandlerFunc) Handle(params GetWsParams) middleware.Responder {
	return fn(params)
}

// GetWsHandler interface for that can handle valid get ws params
type GetWsHandler interface {
	Handle(GetWsParams) middleware.Responder
}

// NewGetWs creates a new http.Handler for the get ws operation
func NewGetWs(ctx *middleware.Context, handler GetWsHandler) *GetWs {
	return &GetWs{Context: ctx, Handler: handler}
}

/*GetWs swagger:route GET /ws Service getWs

Subscribe to weather data events

*/
type GetWs struct {
	Context *middleware.Context
	Handler GetWsHandler
}

func (o *GetWs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
