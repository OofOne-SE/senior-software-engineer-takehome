// Code generated by go-swagger; DO NOT EDIT.

package weather_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new weather assets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for weather assets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetDataWeather(params *GetDataWeatherParams) (*GetDataWeatherOK, error)

	PostDataWeather(params *PostDataWeatherParams) (*PostDataWeatherOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetDataWeather returns weather data for specific day or interval for a single day use same date as from and to parameters
*/
func (a *Client) GetDataWeather(params *GetDataWeatherParams) (*GetDataWeatherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDataWeatherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDataWeather",
		Method:             "GET",
		PathPattern:        "/data/weather",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDataWeatherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDataWeatherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDataWeatherDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostDataWeather singles weather data is created
*/
func (a *Client) PostDataWeather(params *PostDataWeatherParams) (*PostDataWeatherOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDataWeatherParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostDataWeather",
		Method:             "POST",
		PathPattern:        "/data/weather",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDataWeatherReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostDataWeatherOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostDataWeatherDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
