// Code generated by go-swagger; DO NOT EDIT.

package weather_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDataWeatherParams creates a new GetDataWeatherParams object
// with the default values initialized.
func NewGetDataWeatherParams() *GetDataWeatherParams {
	var ()
	return &GetDataWeatherParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDataWeatherParamsWithTimeout creates a new GetDataWeatherParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDataWeatherParamsWithTimeout(timeout time.Duration) *GetDataWeatherParams {
	var ()
	return &GetDataWeatherParams{

		timeout: timeout,
	}
}

// NewGetDataWeatherParamsWithContext creates a new GetDataWeatherParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDataWeatherParamsWithContext(ctx context.Context) *GetDataWeatherParams {
	var ()
	return &GetDataWeatherParams{

		Context: ctx,
	}
}

// NewGetDataWeatherParamsWithHTTPClient creates a new GetDataWeatherParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDataWeatherParamsWithHTTPClient(client *http.Client) *GetDataWeatherParams {
	var ()
	return &GetDataWeatherParams{
		HTTPClient: client,
	}
}

/*GetDataWeatherParams contains all the parameters to send to the API endpoint
for the get data weather operation typically these are written to a http.Request
*/
type GetDataWeatherParams struct {

	/*From*/
	From strfmt.Date
	/*To*/
	To strfmt.Date

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get data weather params
func (o *GetDataWeatherParams) WithTimeout(timeout time.Duration) *GetDataWeatherParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get data weather params
func (o *GetDataWeatherParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get data weather params
func (o *GetDataWeatherParams) WithContext(ctx context.Context) *GetDataWeatherParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get data weather params
func (o *GetDataWeatherParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get data weather params
func (o *GetDataWeatherParams) WithHTTPClient(client *http.Client) *GetDataWeatherParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get data weather params
func (o *GetDataWeatherParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get data weather params
func (o *GetDataWeatherParams) WithFrom(from strfmt.Date) *GetDataWeatherParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get data weather params
func (o *GetDataWeatherParams) SetFrom(from strfmt.Date) {
	o.From = from
}

// WithTo adds the to to the get data weather params
func (o *GetDataWeatherParams) WithTo(to strfmt.Date) *GetDataWeatherParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get data weather params
func (o *GetDataWeatherParams) SetTo(to strfmt.Date) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetDataWeatherParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param from
	qrFrom := o.From
	qFrom := qrFrom.String()
	if qFrom != "" {
		if err := r.SetQueryParam("from", qFrom); err != nil {
			return err
		}
	}

	// query param to
	qrTo := o.To
	qTo := qrTo.String()
	if qTo != "" {
		if err := r.SetQueryParam("to", qTo); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
