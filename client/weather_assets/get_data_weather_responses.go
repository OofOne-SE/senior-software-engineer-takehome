// Code generated by go-swagger; DO NOT EDIT.

package weather_assets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"senior-software-engineer-takehome/models"
)

// GetDataWeatherReader is a Reader for the GetDataWeather structure.
type GetDataWeatherReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDataWeatherReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDataWeatherOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetDataWeatherDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetDataWeatherOK creates a GetDataWeatherOK with default headers values
func NewGetDataWeatherOK() *GetDataWeatherOK {
	return &GetDataWeatherOK{}
}

/*GetDataWeatherOK handles this case with default header values.

Successful, returns weather data units in array or nil array
*/
type GetDataWeatherOK struct {
	Payload []*models.WeatherUnit
}

func (o *GetDataWeatherOK) Error() string {
	return fmt.Sprintf("[GET /data/weather][%d] getDataWeatherOK  %+v", 200, o.Payload)
}

func (o *GetDataWeatherOK) GetPayload() []*models.WeatherUnit {
	return o.Payload
}

func (o *GetDataWeatherOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDataWeatherDefault creates a GetDataWeatherDefault with default headers values
func NewGetDataWeatherDefault(code int) *GetDataWeatherDefault {
	return &GetDataWeatherDefault{
		_statusCode: code,
	}
}

/*GetDataWeatherDefault handles this case with default header values.

errors:
| code                                   | HTTP Code | error                 |
|----------------------------------------|-----------|---------------------- |
| data.weather.get.internal_server_error | 500       | Internal server error |

*/
type GetDataWeatherDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get data weather default response
func (o *GetDataWeatherDefault) Code() int {
	return o._statusCode
}

func (o *GetDataWeatherDefault) Error() string {
	return fmt.Sprintf("[GET /data/weather][%d] GetDataWeather default  %+v", o._statusCode, o.Payload)
}

func (o *GetDataWeatherDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetDataWeatherDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
